/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package helpers;

import geneticalgorithm.GeneticAlgorithm;
import individuals.CandidateSolution;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;

/**
 * Writes the results of a given run into a results file.
 * @author ad3-brown
 */
public class SimpleResultWriter {

    private final boolean printToConsole;
    private final int population;
    private final int genomeLength;
    private File results;
    private BufferedWriter writer;

    /**
     * Initilise the writer. It creates a file, and writes the initial parameters
     * of the run, and the column names for the generations.
     * 
     * @param population
     * @param genomeLength
     * @param dataSet
     * @param extension
     * @param printToConsole
     * @throws IOException
     */
    public SimpleResultWriter(int population, int genomeLength, String dataSet, String extension, boolean printToConsole)
            throws IOException {
        this.population = population;
        this.genomeLength = genomeLength;
        this.printToConsole = printToConsole;

        Date currentDate = new Date();
        SimpleDateFormat currentDateFormat = new SimpleDateFormat("dd_MM_yy_HH_mm_ss");
        String currentDateString = currentDateFormat.format(currentDate);

        String fileName = (extension != null) ? "results_" + extension + ".csv" 
                : "results_" + currentDateString + ".csv";
        results = new File("results/" + dataSet + "/" + fileName).getAbsoluteFile();

        writer = new BufferedWriter(new FileWriter(results));
        writer.write("sep=|"); // set excel delimiter
        writer.newLine();
        writer.write("Population|" + population + "|Genome Length|" + genomeLength);
        writer.write("|Mutation rate|" + GeneticAlgorithm.M_RATE + "|Training percent|" + GeneticAlgorithm.TRAINING_POP);
        writer.write("|Tournament Size|" + GeneticAlgorithm.TOURNAMENT_SIZE);
        writer.newLine();
        writer.write("Generation|Best Fitness|Mean Fitness|Best Candidate");
        writer.newLine();
        writer.flush();

    }

    /**
     * writes the generation, best fitness, mean fitness, and the best individual
     * into the file.
     * 
     * @param gen
     * @param population
     * @return
     * @throws IOException
     */
    public int write(int gen, ArrayList<CandidateSolution> population)
            throws IOException {
        int totalFitness = 0;
        int bestFitness = 0;
        int meanFitness = 0;
        CandidateSolution bestCandidate = null;

        ArrayList<CandidateSolution> sortedPop = new ArrayList<>(population);
        Collections.sort(sortedPop);
        Collections.reverse(sortedPop);
        bestFitness = sortedPop.get(0).getFitness();
        bestCandidate = sortedPop.get(0);
        for (CandidateSolution candidateSolution : population) {
            int fitness = candidateSolution.getFitness();
            totalFitness += fitness;
        }

        meanFitness = totalFitness / population.size();

        writer.write("" + gen + "|" + bestFitness + "|" + meanFitness + "|" + bestCandidate.getGenome().toString());
        writer.newLine();
        writer.flush();
        if (printToConsole) {
            System.out.println("Gen: " + gen + " Best Fitness: " + bestFitness + " Mean Fitness: " + meanFitness + " Best Candidate: " + bestCandidate.getGenome().toString());
        }
        return bestFitness;
    }

    /**
     *
     * writes the final results into the file. This includes the amount of training, 
     * real and total data passed/failed, and a human readable representation of
     * the best individual. This is passed in by the user, and is usually generated by the
     * individual itself.
     * 
     * @param realPassed
     * @param trainingPassed
     * @param realSize
     * @param trainingSize
     * @param ruleRepresentation
     * @throws IOException
     */
    public void writeFinalResults(int realPassed, int trainingPassed, int realSize, int trainingSize, String ruleRepresentation)
            throws IOException {
        boolean pass = true;
        int totalPassed = realPassed + trainingPassed;

        int realFailed = realSize - realPassed;
        int trainingFailed = trainingSize - trainingPassed;
        int totalFailed = realFailed + trainingFailed;

        DecimalFormat df = new DecimalFormat("#.##");

        String realPercentagePass = df.format((double) realPassed / realSize * 100);
        String realPercentageFail = df.format(100 - Double.valueOf(realPercentagePass));
        String trainingPercentagePass = df.format((double) trainingPassed / trainingSize * 100);
        String trainingPercentageFail = df.format(100 - Double.valueOf(trainingPercentagePass));
        String totalPercentagePass = df.format((double) totalPassed / (trainingSize + realSize) * 100);
        String totalPercentageFail = df.format(100 - Double.valueOf(totalPercentagePass));

        writer.write("BEST INDIVIDUAL|" + ruleRepresentation);
        writer.newLine();
        writer.write("FINAL RESULTS|PASS|FAIL|PERCENT PASSED|PERCENT FAILED|TOTAL");
        writer.newLine();
        writer.write("REAL|" + realPassed + "|" + realFailed
                + "|" + realPercentagePass + "|" + realPercentageFail
                + "|" + realSize);
        writer.newLine();
        writer.write("TRAINING|" + trainingPassed + "|" + trainingFailed
                + "|" + trainingPercentagePass + "|" + trainingPercentageFail
                + "|" + trainingSize);
        writer.newLine();
        writer.write("TOTAL|" + totalPassed + "|" + totalFailed
                + "|" + totalPercentagePass + "|" + totalPercentageFail
                + "|" + (trainingSize + realSize));
        writer.newLine();


        System.out.println("\nFinal Results:\n");
        System.out.println("Training data:\nPASS: " + trainingPassed + "\nFAIL: " + trainingFailed + "\nTOTAL: " + trainingSize);
        System.out.println("PERCENT PASSED: " + trainingPercentagePass + "%\nPERCENT FAILED: " + trainingPercentageFail + "%");
        System.out.println("");
        System.out.println("Real data:\nPASS: " + realPassed + "\nFAIL: " + realFailed + "\nTOTAL: " + realSize);
        System.out.println("PERCENT PASSED: " + realPercentagePass + "%\nPERCENT FAILED: " + realPercentageFail + "%");
        System.out.println("");
        System.out.println("Total data:\nPASS: " + totalPassed + "\nFAIL: " + totalFailed + "\nTOTAL: " + (realSize + trainingSize));
        System.out.println("PERCENT PASSED: " + totalPercentagePass + "%\nPERCENT FAILED: " + totalPercentageFail + "%");
        System.out.println("");

        if (totalFailed != 0) {
            System.out.println("FAIL :(");
            writer.write("FAIL :(");
        } else {
            System.out.println("PASS!!!");
            writer.write("Pass!!!");
        }
        writer.flush();
    }

    /**
     *
     * @throws IOException
     */
    public void close()
            throws IOException {
        writer.close();
    }
}
